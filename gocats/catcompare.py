# !usr/bin/python3
"""Catcompare evaluates the agreement between automated fine-gained-to-general gene-GO term category mappings made in
gene annotation files (GAFs) to gene-GO term category mappings generated by hand or by high-throughput experimental
methods."""
import csv
import re


def make_dataset_dict(file_handle, hpa_file=False, reliability_filter=None):
    """Currently setup to read HPA subcellular localization CSV file and create a dictionary mapping ENSG IDs to their
    subcellular location. May need to be generalized, but then again this is a special test for our publication.

    :param file_handle: Location of the dataset file.
    :param hpa_file: Specify whether the dataset is in HPA format NOTE: Only HPA formatting is currently supported.
    :param reliability_filter: Specify which level of reliablity to evaluate from an HPA dataset type. Will vary depending on the version and type of dataset.
    """
    list_split = re.compile(';')
    locations = []
    dataset_dict = {}
    if hpa_file:
        with open(file_handle, 'r') as dataset:
            reader = csv.reader(dataset, delimiter=',', quoting=csv.QUOTE_MINIMAL)
            for row in reader:
                if row[0] == 'Gene':  # In the hpa data, this is the first line indicating the column titles.
                    pass
                else:
                    if not reliability_filter or reliability_filter == row[5]:
                        dataset_dict[row[0]] = {
                            'gene_name': row[1],
                            'main_location': re.split(list_split, row[2]),
                            'other_location': re.split(list_split, row[3]),
                            'expression_type': row[4],
                            'reliability': row[5],
                            'main_location_go_id_list': re.split(list_split, row[6]),
                            'other_location_go_id_list': re.split(list_split, row[7])
                            }
                        locations.extend(re.split(list_split, row[1])+re.split(list_split, row[2]))
                    else:
                        pass

        hpa_assignments = {}
        for k, v in dataset_dict.items():
            hpa_assignments[v['gene_name']] = set([id for id in v['main_location_go_id_list'] + v['other_location_go_id_list'] if id != ''])
    else:
        print('Non-HPA datasets not yet supported')
        return
    return hpa_assignments

